/* Private Authentication Protocol

 1. A -> B: {Na, pub(A)}pub(B)
 2. B -> A: {Na, Nb, pub(B)}pub(A) if B wants to communicate with A
            {Nb}pub(B) otherwise
*/




/* Theory for randomised asymmetric encryption */
fun aenc/3.
fun pk/1. // [pk(k)] is the public key corresponding to the decryption key [k]
reduc adec(aenc(msg,rnd,pk(k)),k) -> msg.

const ok.

// role of A. Arguments:
// c: channel, s: secret key, p: public key of the recipient, n: nonce
let A(c,s,p,n) =
  new r; out(c,aenc((n,pk(s)),r,p));
  in(c,x);
  let (=n,y,=p) = adec(x,s) in
  0. // here y is supposed to be the nonce of B


// role of B. Arguments:
// c: channel, s: secret key, p: public key of the accepted connection, n: nonce
let B(c,s,p,n) =
  in(c,x);
  let (y,=p) = adec(x,s) in
    // accepting connection (and nonce of the recipient = y)
    new r; out(c,aenc((y,n,pk(s)),r,p))
  else
    // decryption failure or refusing connection => decoy message
    new r; out(c,aenc(n,r,pk(s))).


fun sk/1 [private].
reduc is_honest(pk(sk(x))) -> ok.
free CST,send,rcpt.

let Role(c,role,id1,pk2,N) =
  if role = send then A(c,sk(id1),pk2,N)
  else if role = rcpt then B(c,sk(id1),pk2,N).

let Role_adv(c,data_ch) =
  in(data_ch,data);
  let (role,id1,pk2,N) = data in
  Role(c,role,id1,pk2,N).

let Role_cst(c,data_ch) =
  in(data_ch,data);
  let (role,id1,pk2,N) = data in
  if is_honest(pk2) = ok then Role(c,role,CST,pk(sk(CST)),CST)
  else Role(c,role,id1,pk2,N).


free ck,ck0,c,data_ch.

// 1 role: no problem
let P1_1 =
  out(ck,pk(sk(CST)))
  | !^1 Role_adv(c,data_ch).
let P2_1 =
  out(ck,pk(sk(CST)))
  | !^1 Role_cst(c,data_ch).
query trace_equiv(P1_1,P2_1).


// 2 roles: violating of anonymity
// NB. The attack does not require other public keys than that of CST to work
let P1_2 =
  out(ck,pk(sk(CST)))
  | !^2 Role_adv(c,data_ch).
let P2_2 =
  out(ck,pk(sk(CST)))
  | !^2 Role_cst(c,data_ch).
query trace_equiv(P1_2,P2_2).
